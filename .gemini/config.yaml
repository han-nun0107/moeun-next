review:
  language: 'ko'
  check_security: true
  check_performance: true
  style: |
    ### 네이밍 규칙
    - 반환 값이 boolean인 경우 변수명은 `is`로 시작한다. (예: isLoading, isOpen)
    - 이벤트 핸들러 함수는 `handle`로 시작한다. (예: handleClick, handleSubmit)
    - 상수는 모두 대문자 + 스네이크 케이스로 작성한다. (예: API_URL, DEFAULT_LIMIT)

    ### 디렉토리 및 파일 네이밍
    - `components/` 디렉토리 안의 파일은 PascalCase로 작성한다. (예: UserCard.tsx)
    - `components/` 하위 폴더명은 kebab-case로 작성한다. (예: user-card/)
    - 디렉토리 내부 일반 파일은 camelCase로 작성한다. (예: useAuth.ts, fetchData.ts)
    - 이미지 및 svg 파일은 kebab-case로 작성한다. (예: user-avatar.svg, product-banner.png)

    ### 타입스크립트 규칙
    - `interface` 대신 `type`을 우선적으로 사용한다.
    - `any` 타입 사용을 금지한다.
    - 컴포넌트 Props와 API 응답은 반드시 타입 정의를 갖는다.
    - Zustand store state와 actions도 타입을 명확히 정의한다.

    ### 이미지 포맷
    - 아이콘/로고: svg 파일 사용
    - 제품/배너/배경: jpg 또는 png 파일 사용

    ### 모듈 export 규칙
    - `export const` : 커스텀 훅, 유틸 함수, 상수
    - `export default`: UI 컴포넌트

    ### React / Next.js 코드 스타일
    - React는 함수형 컴포넌트만 사용한다.
    - UI 컴포넌트는 모두 PascalCase로 작성한다.
    - 컴포넌트는 불필요한 `React.FC` 대신 일반 함수형 선언을 사용한다.
    - Next.js `app/` 라우팅은 디렉토리 기반 규칙을 따른다.
    - Server Component와 Client Component를 명확히 구분한다. (`"use client"`)

    ### 상태 관리
    - Zustand는 slice 패턴을 사용해 store를 모듈화한다.
    - TanStack Query는 쿼리 키를 상수로 관리하고, 캐싱 전략을 일관되게 적용한다.

    ### 성능 / 보안
    - TanStack Query를 사용할 때는 Query의 `error`, `isError`, `onError`를 활용해 에러를 처리한다.
    - fetch/axios 같은 비동기 호출을 TanStack Query 외부에서 직접 사용할 때는 try/catch로 감싼다.
    - 불필요한 console.log를 금지한다.
    - useEffect 내부에서 async 직접 사용하지 않고 별도 함수로 분리한다.
    - 리스트 렌더링 시 key는 index 대신 고유 id를 사용한다.
    - 메모이제이션(useMemo, useCallback)을 필요할 때 고려한다.
